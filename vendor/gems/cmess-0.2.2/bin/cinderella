#! /usr/bin/ruby

#--
###############################################################################
#                                                                             #
# cinderella -- Handle double encoded characters                              #
#   [A component of cmess, the encoding tool-box]                             #
#                                                                             #
# Copyright (C) 2007 University of Cologne,                                   #
#                    Albertus-Magnus-Platz,                                   #
#                    50932 Cologne, Germany                                   #
#                                                                             #
# Authors:                                                                    #
#     Jens Wille <jens.wille@uni-koeln.de>                                    #
#                                                                             #
# cmess is free software; you can redistribute it and/or modify it under the  #
# terms of the GNU General Public License as published by the Free Software   #
# Foundation; either version 3 of the License, or (at your option) any later  #
# version.                                                                    #
#                                                                             #
# cmess is distributed in the hope that it will be useful, but WITHOUT ANY    #
# WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS   #
# FOR A PARTICULAR PURPOSE. See the GNU General Public License for more       #
# details.                                                                    #
#                                                                             #
# You should have received a copy of the GNU General Public License along     #
# with cmess. If not, see <http://www.gnu.org/licenses/>.                     #
#                                                                             #
###############################################################################
#++

require 'optparse'
require 'yaml'

$: << File.join(File.dirname(__FILE__), '..', 'lib')

require 'cmess/cinderella'
require 'cmess/cli'

include CMess::CLI

PROGNAME = File.basename($0)

options = {
  :input           => STDIN,
  :output          => STDOUT,
  :pot             => nil,
  :crop            => nil,
  :source_encoding => nil,
  :target_encoding => determine_system_encoding,
  :csets           => [CMess::Cinderella::DEFAULT_CSETS_DIR],
  :repair          => false
}

OptionParser.new(nil, 40) { |opts|
  opts.banner = "Usage: #{$0} [options] [FILE...]"

  opts.separator ''
  opts.separator 'Options:'

  opts.on('-i', '--input FILE', "Input file to read from [Default: STDIN]") { |f|
    options[:input] = open_file_or_std(f)
    options[:input_set] = true
  }

  opts.separator ''

  opts.on('-p', '--pot FILE', "The good into the pot...") { |f|
    options[:pot] = open_file_or_std(f, 'w')
  }

  opts.on('-c', '--crop FILE', "...the bad into the crop") { |f|
    options[:crop] = open_file_or_std(f, 'w')
  }

  opts.separator ''

  opts.on('-o', '--output [FILE]', "Write both good and bad lines to FILE or", "default [Default: STDOUT] (Particularly", "useful in combination with the '-r' option)") { |f|
    options[:output] = open_file_or_std(f, 'w') if f

    options[:pot]  = options[:output]
    options[:crop] = options[:output]
  }

  opts.separator ''

  opts.on('-I', '--in-place FILE', "Modify file in-place; sets '-i' and '-o'", "(Only really useful in combination with", "the '-r' option)") { |f|
    options[:input], options[:output] = open_file_in_place(f)
    options[:input_set] = true

    options[:pot]  = options[:output]
    options[:crop] = options[:output]
  }

  opts.separator ''

  opts.on('-e', '--source-encoding ENCODING', "Source encoding (from) [REQUIRED]") { |e|
    options[:source_encoding] = e
  }

  opts.on('-t', '--target-encoding ENCODING', "Target encoding (to); see '-l' for a list", "of available encodings [Default: #{options[:target_encoding]}]") { |e|
    options[:target_encoding] = e
  }

  opts.separator ''

  opts.on('-T', '--addtl-target-encodings DIRECTORY', "Directory providing additional char files", "for target encoding") { |d|
    ensure_directory(d)

    options[:csets] |= [File.expand_path(d)]
  }

  opts.separator ''

  opts.on('-l', '--list-encodings', "Display a list of available target encodings", "and exit; see '-T' on how to add your own") {
    csets = options[:csets].inject({}) { |hash, cset|
      encodings = Dir[File.join(cset, '*.yaml')].sort.map { |yaml|
        File.basename(yaml, '.yaml') unless File.symlink?(yaml)
      }.compact

      hash[cset] = encodings unless encodings.empty?
      hash
    }

    if csets.empty?
      puts "No target encodings available for #{PROGNAME}"
    else
      puts "Available target encodings for #{PROGNAME}:"
      csets.each { |cset, encodings|
        puts "[#{cset}]"
        encodings.each { |encoding|
          puts "  - #{encoding}"
        }
      }
    end

    exit
  }

  opts.separator ''

  opts.on('-r', '--repair', "Try to repair corrupted characters") {
    options[:repair] = true
  }

  opts.separator ''
  opts.separator 'Generic options:'

  opts.on('-h', '--help', "Print this help message and exit") {
    puts opts
    exit
  }

  opts.on('--version', "Print program version and exit") {
    puts "#{PROGNAME} v#{CMess::Cinderella::VERSION} (part of cmess v#{CMess::VERSION})"
    exit
  }

  opts.separator ''
  opts.separator "If '-p' or '-c' is omitted, and '-o' is not given either, that particular output"
  opts.separator "is ignored. When FILE is -, either STDIN or STDOUT is used (as appropriate)."
}.parse!

cli do
  options[:target_encoding].call if options[:target_encoding].respond_to?(:call)

  abort "No source encoding given! (Use the '-e' switch to do so; see '--help' for more information)" \
    unless options[:source_encoding]

  yaml_file = "#{options[:target_encoding].downcase}.yaml"
  char_file = options[:csets].inject(nil) { |path, cset|
    path = File.join(cset, yaml_file)
    break path if File.readable?(path)
  }

  abort "Char file not found for target encoding: #{options[:target_encoding]}" \
    unless char_file

  trailing_args_as_input(options)

  CMess::Cinderella.pick(
    options[:input],
    options[:pot],
    options[:crop],
    options[:source_encoding],
    options[:target_encoding],
    YAML.load_file(char_file),
    options[:repair]
  )
end
